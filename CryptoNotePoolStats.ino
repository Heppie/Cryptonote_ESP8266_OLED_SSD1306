#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <ESP8266WiFi.h>
#include "esp8266httpclient.h"

Adafruit_SSD1306 display(D6);

const char* ssid     = "SSID";
const char* password = "PASSWORD";
String JsonResponse;

const unsigned char ETNLogo[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1C, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x63, 0xF9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xCF, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0xBF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x7F, 0xF3, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0xFF, 0xCF, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0xFF, 0x3F, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0xFC, 0xFE, 0xF4, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0D, 0xF3, 0xFD, 0xF4, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0B, 0xF7, 0xF9, 0xF6, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0B, 0xF9, 0xFC, 0xFA, 0x0F, 0xE8, 0xFE, 0x7F, 0x3D, 0xF3, 0xFB, 0xFC, 0xFE, 0x81, 0x7F, 0xF8,
  0x0B, 0xF3, 0xFF, 0x7A, 0x18, 0x28, 0x81, 0x40, 0x21, 0x06, 0x0A, 0x05, 0x02, 0x81, 0x43, 0x08,
  0x0B, 0xEF, 0xFE, 0x7A, 0x18, 0x28, 0x81, 0x40, 0x21, 0x06, 0x0A, 0x05, 0x82, 0x81, 0x43, 0x08,
  0x0B, 0x9F, 0xF9, 0xFA, 0x1F, 0xE8, 0xFF, 0x40, 0x21, 0x06, 0x0A, 0x05, 0xFE, 0x81, 0x43, 0x08,
  0x0B, 0xEF, 0xF7, 0xFA, 0x18, 0x08, 0x80, 0x40, 0x21, 0x06, 0x0A, 0x05, 0x00, 0x81, 0x43, 0x08,
  0x0B, 0xF7, 0xF9, 0xF6, 0x18, 0x08, 0x80, 0x40, 0x21, 0x06, 0x0A, 0x05, 0x00, 0xC1, 0x43, 0x08,
  0x05, 0xF7, 0xF9, 0xF4, 0x0F, 0xE6, 0xFF, 0x7F, 0x3D, 0x03, 0xFA, 0x04, 0xFE, 0x7F, 0x43, 0x08,
  0x05, 0xEF, 0xE7, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0xCF, 0x9F, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x1E, 0x7F, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x3D, 0xFF, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x77, 0xFF, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xCF, 0xFE, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x31, 0xF1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setRotation(2);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.clearDisplay();
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  display.drawBitmap(0, 0,  ETNLogo, 128, 32, 1);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Connecting to WiFi");
  display.display();
  delay(2000);

  while (WiFi.status() != WL_CONNECTED) {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Connecting to WiFi...");
    display.display();
    delay(2000);
    display.clearDisplay();
  }
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("WiFi Connected!");
  display.setCursor(0, 10);
  display.println(WiFi.localIP());
  display.display();
  delay(2000);
}

void loop() {
  if (WiFi.status() == WL_CONNECTED)
  {
    GetMinerJson();
    DynamicJsonBuffer jsonBuffer;
    JsonObject& root = jsonBuffer.parseObject(JsonResponse);
    JsonObject& stats = root["stats"];
    const char* stats_hashes = stats["hashes"]; // "60375505"
    const char* stats_lastShare = stats["lastShare"]; // "1510006522"
    const float stats_balance = stats["balance"]; // "101"
    const float stats_paid = stats["paid"]; // "4500"
    const String stats_hashrate = stats["hashrate"]; // "239.00 H"
    int DecimalIndex = stats_hashrate.indexOf('.');

    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Hashrate: ");
    display.print(stats_hashrate.substring(0, DecimalIndex));
    display.print(stats_hashrate.substring(DecimalIndex + 3));
    display.print("/s");
    display.setCursor(0, 10);
    display.print("Pending: ");
    display.print(stats_balance / 100);
    display.print(" ETN");
    display.setCursor(0, 20);
    display.print("Paid: ");
    display.print(stats_paid / 100);
    display.print(" ETN");
    display.display();

  }
  delay(30000);
}

void GetMinerJson()
{
  HTTPClient http;
  http.begin("http://electroneum.hashparty.io:8117/stats_address?longpoll=false&address=WALLETADDRESSHERE");
  int httpCode = http.GET();
  if (httpCode > 0) { //Check the returning code
    JsonResponse = http.getString();   //Get the request response payload
  }

  http.end();   //Close connection

}

void GetPoolJson()
{
  HTTPClient http;
  http.begin("http://52.191.161.211:8117/stats");
  int httpCode = http.GET();
  if (httpCode > 0) { //Check the returning code
    JsonResponse = http.getString();   //Get the request response payload
  }

  http.end();   //Close connection
}


